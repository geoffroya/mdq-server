<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    default-lazy-init="true"
    xmlns:c="http://www.springframework.org/schema/c"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!--
        Import common bean definitions.
    -->
    <import resource="classpath:common-beans.xml"/>
    
    <!--
        Import eduGAIN beans.
    -->
    <import resource="classpath:int_edugain/beans.xml"/>
    
    <!--
        Import InCommon beans.
    -->
    <import resource="classpath:us_incommon/beans.xml"/>
    
    <!--
        Pipeline used to acquire metadata for service.
        
        Input: empty collection.
        
        Output: collection of individual entity metadata items.
    -->
    <bean id="source.SAML" parent="SimplePipeline">
        <property name="stages">
            <list>
                <ref bean="source.entities"/>
                <ref bean="populateItemIds"/>
                <bean class="net.shibboleth.metadata.pipeline.ItemIdTransformStage">
                    <property name="idTransformers">
                        <list>
                            <bean class="net.shibboleth.metadata.pipeline.MDQuerySHA1ItemIdTransformer"/>
                        </list>
                    </property>
                </bean>
            </list>
        </property>
    </bean>

    <!--
        Pipeline used to render metadata for publication.
        
        Input: collection of individual entity metadata items.
        
        Output: collection of items ready for serialization. For SAML, the collection is
            normally a single item, multiple entities having been combined into an
            EntitiesDescriptor.
    -->
    <bean id="render.SAML" parent="SimplePipeline">
        <property name="stages">
            <list>
                <!--
                    If more than one EntityDescriptor has been found,
                    wrap them all in an EntitiesDescriptor.
                -->
                <bean id="assemble" parent="stage_parent"
                    class="net.shibboleth.metadata.dom.saml.EntitiesDescriptorAssemblerStage">
                    <property name="collectionPredicate">
                        <bean class="net.shibboleth.metadata.pipeline.AtLeastCollectionPredicate"
                            p:minimum="2"/>
                    </property>
                </bean>
                
                <!--
                    Set cacheDuration to 6 hours.
                -->
                <bean id="addCacheDuration" parent="stage_parent"
                    class="net.shibboleth.metadata.dom.saml.SetCacheDurationStage"
                    p:cacheDuration="#{ 1000L * 60 * 60 * 6 }"/>
                    
                <!--
                    Set validUntil window to 14 days.
                -->
                <bean id="addValidUntil" parent="stage_parent"
                    class="net.shibboleth.metadata.dom.saml.SetValidUntilStage"
                    p:validityDuration="#{ 1000L * 60 * 60 * 24 * 14 }"/>
                    
                <!--
                    Add a random ID attribute for the signature to use.
                -->
                <bean id="addID" parent="stage_parent"
                    class="net.shibboleth.metadata.dom.saml.GenerateIdStage"/>
                    
                <!-- perform signature or not, depending on profile -->
                <ref bean="perform.signature"/>
            </list>
        </property>
    </bean>

    <!--
        Metadata lookup service.
    -->
    <bean id="metadataService.SAML" parent="component_parent"
        class="uk.org.iay.mdq.server.MetadataService"
        lazy-init="false">
        <property name="sourcePipeline" ref="source.SAML"/>
        <property name="renderPipeline" ref="render.SAML"/>
        <property name="serializer">
            <bean class="net.shibboleth.metadata.dom.DOMElementSerializer"/>
        </property>
    </bean>

    <!--
        Plain text view for query results.
    -->
    <bean id="queryResultText" class="uk.org.iay.mdq.server.ResultTextView"/>

    <!--
        SAML metadata view for query results.
    -->
    <bean id="queryResultRaw" class="uk.org.iay.mdq.server.ResultRawView"
        c:cType="application/samlmetadata+xml"/>

    <!--
        View resolver for the application.
    -->
    <bean id="viewResolver"
        class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver" lazy-init="false">
        
        <!--
            Content negotiation strategy.
            
            * Ignore file extension and format attribute.
            * Use Accept header.
            * Default to SAML metadata.
        -->
        <property name="contentNegotiationManager">
            <bean class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
                <property name="favorPathExtension" value="false"/>
                <property name="favorParameter" value="false"/>
                <property name="ignoreAcceptHeader" value="false"/>
                <property name="defaultContentType" value="application/samlmetadata+xml"/>
            </bean>
        </property>
    
        <!--
            Disable all other view resolvers until we have them configured correctly. 
        -->
        <property name="viewResolvers">
            <list>
                <ref bean="groovyTemplateViewResolver"/>
            </list>
        </property>
        
        <!--
            Rely on default views for SAML metadata and text/plain. Prefer the
            SAML metadata view.
        -->
        <property name="defaultViews">
            <list>
                <ref bean="queryResultRaw"/>
                <ref bean="queryResultText"/>
            </list>
        </property>
    </bean>

    <!--
        "dev" profile
        
        Metadata is sourced from a local XML resource.
    -->
    <beans profile="dev">
    
        <bean name="source.entities" parent="CompositeStage">
            <property name="composedStages">
                <list>
                    <bean parent="DOMResourceSourceStage">
                        <property name="DOMResource">
                            <bean parent="ClassPathResource">
                                <constructor-arg value="dev/entities.xml"/>
                            </bean>
                        </property>
                    </bean>
                    <ref bean="disassemble"/>
                </list>
            </property>
        </bean>

    </beans>

    <!--
        "incommon" profile
        
        Metadata is sourced from the InCommon production aggregate.
    -->
    <beans profile="incommon">
    
        <bean name="source.entities" parent="CompositeStage">
            <property name="composedStages">
                <list>
                    <!-- Start with the InCommon production aggregate. -->
                    <ref bean="us_incommon_productionEntities"/>
                    
                    <!-- Retain only IdP entities. -->
                    <bean parent="XPathFilteringStage"
                        p:XPathExpression="not(md:IDPSSODescriptor)"/>
                </list>
            </property>
        </bean>

    </beans>

    <!--
        "prod" profile
        
        Metadata is sourced from the eduGAIN production aggregate.
    -->
    <beans profile="prod">
        <alias alias="source.entities" name="int_edugain_productionEntities"/>
    </beans>
    
    <!--
        "sign" profile
    -->
    <beans profile="sign">
    
        <bean id="perform.signature" parent="XMLSignatureSigningStage">
            <property name="certificates">
                <bean parent="X509CertificateFactoryBean">
                    <property name="resource">
                        <bean parent="FileSystemResource">
                            <constructor-arg value="${sign.certificate}"/>
                        </bean>
                    </property>
                </bean>
            </property>
            <property name="privateKey">
                <bean parent="PrivateKeyFactoryBean">
                    <property name="resource">
                        <bean parent="FileSystemResource">
                            <constructor-arg value="${sign.key}"/>
                        </bean>
                    </property>
                </bean>
            </property>
        </bean>

    </beans>

    <!--
        "not signing" profile
    -->
    <beans profile="!sign">
    
        <!-- do nothing -->
        <bean id="perform.signature" parent="CompositeStage"/>

    </beans>

</beans>
