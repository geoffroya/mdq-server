<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    default-lazy-init="true"
    xmlns:c="http://www.springframework.org/schema/c"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!-- This bean MUST be called "conversionService" to work properly. -->
    <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <bean class="net.shibboleth.ext.spring.config.DurationToLongConverter" />
                <bean class="net.shibboleth.ext.spring.config.StringToIPRangeConverter" />
                <bean class="net.shibboleth.ext.spring.config.BooleanToPredicateConverter" />
                <bean class="net.shibboleth.ext.spring.config.StringBooleanToPredicateConverter" />
                <bean class="net.shibboleth.ext.spring.config.StringToResourceConverter" />
            </set>
        </property>
    </bean>

    <!--
        Import common bean definitions.
    -->
    <import resource="classpath:common-beans.xml"/>
    
    <!--
        Pipeline used to render metadata for publication.
        
        Input: collection of individual entity metadata items.
        
        Output: collection of items ready for serialization. For SAML, the collection is
            normally a single item, multiple entities having been combined into an
            EntitiesDescriptor.
    -->
    <bean id="render.SAML" parent="SimplePipeline">
        <property name="stages">
            <list>
                <!--
                    If more than one EntityDescriptor has been found,
                    wrap them all in an EntitiesDescriptor.
                -->
                <bean id="assemble" parent="stage_parent"
                    class="net.shibboleth.metadata.dom.saml.EntitiesDescriptorAssemblerStage">
                    <property name="collectionPredicate">
                        <bean class="net.shibboleth.metadata.pipeline.AtLeastCollectionPredicate"
                            p:minimum="2"/>
                    </property>
                </bean>
                
                <!--
                    Set cacheDuration.
                -->
                <bean id="addCacheDuration" parent="stage_parent"
                    class="net.shibboleth.metadata.dom.saml.SetCacheDurationStage"
                    p:cacheDuration="${render.SAML.cacheDuration}"/>
                    
                <!--
                    Set validUntil window.
                -->
                <bean id="addValidUntil" parent="stage_parent"
                    class="net.shibboleth.metadata.dom.saml.SetValidUntilStage"
                    p:validityDuration="${render.SAML.validUntil}"/>
                    
                <!--
                    Add a random ID attribute for the signature to use.
                -->
                <bean id="addID" parent="stage_parent"
                    class="net.shibboleth.metadata.dom.saml.GenerateIdStage"/>
                    
                <!--
                    Perform an identity transform to ward off signature issues.
                    
                    See https://issues.shibboleth.net/jira/browse/MDA-144
                -->
                <bean id="identity.transform" parent="XSLTransformationStage">
                    <property name="XSLResource">
                        <bean parent="ClassPathResource">
                            <constructor-arg value="identity.xsl"/>
                        </bean>
                    </property>
                </bean>

                <!-- perform signature or not, depending on profile -->
                <ref bean="perform.signature"/>
            </list>
        </property>
    </bean>

    <!--
        Item collection library.
    -->
    <bean id="itemCollection.SAML" parent="component_parent"
        class="uk.org.iay.mdq.server.ItemCollectionLibrary"
        lazy-init="false">
        <property name="sourcePipeline" ref="source.SAML"/>
    </bean>

    <!--
        Metadata lookup service.
    -->
    <bean id="metadataService.SAML" parent="component_parent"
        class="uk.org.iay.mdq.server.MetadataService"
        lazy-init="false">
        <property name="itemCollectionLibrary" ref="itemCollection.SAML"/>
        <property name="renderPipeline" ref="render.SAML"/>
        <property name="refreshInterval" value="${metadataService.SAML.refreshInterval}"/>
        <property name="serializer">
            <bean class="net.shibboleth.metadata.dom.DOMElementSerializer"/>
        </property>
    </bean>

    <!--
        Plain text view for query results.
    -->
    <bean id="queryResultText" class="uk.org.iay.mdq.server.ResultTextView"/>

    <!--
        SAML metadata view for query results.
    -->
    <bean id="queryResultRaw" class="uk.org.iay.mdq.server.ResultRawView"
        c:cType="application/samlmetadata+xml"/>

    <!--
        View resolver for the application.
    -->
    <bean id="viewResolver"
        class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver" lazy-init="false">
        
        <!--
            Content negotiation strategy.
            
            * Ignore file extension and format attribute.
            * Use Accept header.
            * Default to SAML metadata.
        -->
        <property name="contentNegotiationManager">
            <bean class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
                <property name="favorPathExtension" value="false"/>
                <property name="favorParameter" value="false"/>
                <property name="ignoreAcceptHeader" value="false"/>
                <property name="defaultContentType" value="application/samlmetadata+xml"/>
            </bean>
        </property>
    
        <!--
            Disable all other view resolvers until we have them configured correctly. 
        -->
        <property name="viewResolvers">
            <list>
                <ref bean="groovyMarkupViewResolver"/>
            </list>
        </property>
        
        <!--
            Rely on default views for SAML metadata and text/plain. Prefer the
            SAML metadata view.
        -->
        <property name="defaultViews">
            <list>
                <ref bean="queryResultRaw"/>
                <ref bean="queryResultText"/>
            </list>
        </property>
    </bean>

    <!--
        Externalise part of the configuration.
        
        By default, include a local classpath config.xml; this can be overridden by
        setting the config.xml property to, for example, a file: resource.
        
        An external config.xml is expected to replace the definitions of
        all beans in the default config.xml, and may also redefine any
        of the beans defined here up to this point.
    -->
    <import resource="${config.xml:classpath:config.xml}"/>

    <!--
        perform.signature
        
        By default, don't perform signing operation.
        
        In the "sign" profile, sign using external signature and key resources.
    -->
    <beans profile="!sign">
        <bean id="perform.signature" parent="CompositeStage"/>
    </beans>
    <beans profile="sign">

        <bean id="certificateResource" parent="FileSystemResource">
            <constructor-arg value="${sign.certificate}"/>
        </bean>

        <bean id="perform.signature" parent="XMLSignatureSigningStage">
            <property name="certificates">
                <bean parent="X509CertificateFactoryBean">
                    <property name="resource" ref="certificateResource"/>
                </bean>
            </property>
            <property name="privateKey">
                <bean parent="PrivateKeyFactoryBean">
                    <property name="resource">
                        <bean parent="FileSystemResource">
                            <constructor-arg value="${sign.key}"/>
                        </bean>
                    </property>
                </bean>
            </property>
        </bean>
    </beans>

</beans>
